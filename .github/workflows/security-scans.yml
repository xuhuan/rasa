name: Security Scans

on:
  pull_request:
    types: [opened, synchronize, labeled]

concurrency:
  group: security-scans-${{ github.head_ref }}  # head branch name
  cancel-in-progress: true

jobs:
  changes:
    name: Check for file changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.filter.outputs.backend }}
      docker: ${{ steps.filter.outputs.docker }}
      docs: ${{ steps.filter.outputs.docs }}
    steps:
      - uses: actions/checkout@v3
      - uses: RasaHQ/pr-changed-files-filter@c4f7116a04b8a4596313469429e2ad235f59d9c4
        id: filter
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          filters: .github/change_filters.yml

  gitleaks:
    name: Detecting hardcoded secrets
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
      with:
        # Fetch all history for all tags and branches
        fetch-depth: '0'

    - name: Gitleaks - detecting hardcoded secrets
      uses: zricethezav/gitleaks-action@1f2d10fb689bc07a5f56f48d6db61f5bbbe772fa # v2.3.2
      with:
        config-path: .gitleaks.toml

  bandit:
    name: Detect python security issues
    runs-on: ubuntu-latest
    needs: [changes]

    steps:
    - name: Checkout git repository 🕝
      if: needs.changes.outputs.backend == 'true'
      uses: actions/checkout@v3

    - name: Set up Python 3.9 🐍
      if: needs.changes.outputs.backend == 'true'
      uses: actions/setup-python@98f2ad02fd48d057ee3b4d4f66525b231c3e52b6  # v3.0
      with:
        python-version: 3.9

    - name: Read Poetry Version 🔢
      if: needs.changes.outputs.backend == 'true'
      run: |
        echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
      shell: bash

    - name: Install poetry 🦄
      if: needs.changes.outputs.backend == 'true'
      uses: Gr1N/setup-poetry@09236184f6c1ab47c0dc9c1001c7fe200cf2afb0 # v7
      with:
        poetry-version: ${{ env.POETRY_VERSION }}

    - name: Load Poetry Cached Libraries ⬇
      id: cache-poetry
      if: needs.changes.outputs.backend == 'true'
      uses: actions/cache@v3
      with:
        path: .venv
        key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-3.9-${{ hashFiles('**/poetry.lock') }}-${{ secrets.POETRY_CACHE_VERSION }}
        restore-keys: ${{ runner.os }}-poetry-3.9

    - name: Clear Poetry cache
      if: steps.cache-poetry.outputs.cache-hit == 'true' && needs.changes.outputs.backend == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-security-scans')
      run: rm -r .venv

    - name: Create virtual environment
      if: (steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-security-scans')) && needs.changes.outputs.backend == 'true'
      run: python -m venv create .venv

    - name: Set up virtual environment
      if: needs.changes.outputs.backend == 'true'
      run: poetry config virtualenvs.in-project true

    - name: Install Dependencies (Linux) 📦
      if: needs.changes.outputs.backend == 'true'
      run: make install

    - name: Run Bandit 🔪
      if: needs.changes.outputs.backend == 'true'
      run: make lint-security

  snyk:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Run Snyk Open Source to check for Python vulnerabilities
        uses: snyk/actions/python-3.8@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --all-projects --org=rasa --skip-unresolved
      - name: Run Snyk Open Source to check for JS vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: monitor
          args: --org=rasa --yarn-workspaces --strict-out-of-sync=false --prune-repeated-subdependencies
